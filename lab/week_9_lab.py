# -*- coding: utf-8 -*-
"""Week 9 lab.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kgv2ifhO9TZRUi4rBdywG0tjHuFzdNxQ

# Week 9 Lab

In this lab, we will implement a fuzzy inference system (FIS) to control an intelligent traffic light system. Here, we consider a simple intersection which is made of two streets, Main and Side, and no turning lanes. By default, the traffic lights are green for the Main street and red for the Side street. When there is some traffic on the Side, the FIS is activated. Street sensors provide information on the number of cars on the Main street (incoming traffic) and the number of cars on the Side street (waiting traffic). Based on this information, the FIS needs to make decisions on:
*   waiting duration: the duration before the traffic lights on the Side street switch to green; and
*   green duration: the duration for which the Side traffic lights stay green.
Both durations are measured in seconds.

Below is a basic implementation for the traffic light FIS, followed by tesing it on some test cases and some lab tasks.

# A. Basic FIS implementation
"""

pip install -U scikit-fuzzy

"""## 1- Inputs & outputs"""

import numpy as np
import skfuzzy as fuzz
import matplotlib.pyplot as plt
from skfuzzy import control as ctrl


waitingTraffic  = ctrl.Antecedent(np.arange(1, 100, 1), 'waiting')
incomingTraffic = ctrl.Antecedent(np.arange(0, 100, 1), 'incoming')

waitingDuration = ctrl.Consequent(np.arange(0, 120, 1), 'wait duration')
openDuration    = ctrl.Consequent(np.arange(0, 120, 0.1), 'open duration')

"""## 2- Fuzzification & membership functions"""

fuzzySetNamesTraffic= ['light', 'average', 'heavy']
waitingTraffic.automf(names=fuzzySetNamesTraffic)
incomingTraffic.automf(names=fuzzySetNamesTraffic)
waitingTraffic.view()
incomingTraffic.view()

fuzzySetNamesDuration = ['short', 'medium', 'long']
waitingDuration.automf(names=fuzzySetNamesDuration)
openDuration.automf(names=fuzzySetNamesDuration)
waitingDuration.view()
openDuration.view()

"""## 3- Knowledge base"""

rule1 = ctrl.Rule(incomingTraffic['light'] & waitingTraffic['light'], [waitingDuration['short'], openDuration['short']])
rule2 = ctrl.Rule(incomingTraffic['light'] & waitingTraffic['average'], [waitingDuration['short'], openDuration['medium']])
rule3 = ctrl.Rule(incomingTraffic['light'] & waitingTraffic['heavy'], [waitingDuration['short'], openDuration['long']])

rule4 = ctrl.Rule(incomingTraffic['average'] & waitingTraffic['light'], [waitingDuration['medium'], openDuration['short']])
rule5 = ctrl.Rule(incomingTraffic['average'] & waitingTraffic['average'], [waitingDuration['medium'], openDuration['medium']])
rule6 = ctrl.Rule(incomingTraffic['average'] & waitingTraffic['heavy'], [waitingDuration['medium'], openDuration['long']])

rule7 = ctrl.Rule(incomingTraffic['heavy'] & waitingTraffic['light'], [waitingDuration['long'], openDuration['short']])
rule8 = ctrl.Rule(incomingTraffic['heavy'] & waitingTraffic['average'], [waitingDuration['long'], openDuration['medium']])
rule9 = ctrl.Rule(incomingTraffic['heavy'] & waitingTraffic['heavy'], [waitingDuration['long'], openDuration['long']])

"""## 4- Inference Engine"""

# add any code if needed

"""## 5- Defuzzification"""

waitingDuration.defuzzify_method = 'centroid'
openDuration.defuzzify_method = 'centroid'

"""# B. Model Usage

Tesing on a single test case and visualising the results.
"""

fis = ctrl.ControlSystem([rule1,  rule2 , rule3, rule4, rule5,rule6,rule7,rule8,rule9])
fis_simulator = ctrl.ControlSystemSimulation(fis)

# Now, test yur FIS with some inputs & check the outputs
fis_simulator.input['incoming'] = 2
fis_simulator.input['waiting'] = 80
fis_simulator.compute()
print(round(fis_simulator.output['wait duration'],0))
waitingDuration.view(sim= fis_simulator)
print(round(fis_simulator.output['open duration'],0))
openDuration.view(sim= fis_simulator)

"""Testing on multiple test cases"""

incoming_test = [0,15, 20,  40 , 12, 8, 59]
waiting_test  = [2, 1, 25 , 5  , 29, 8, 5]

for i in range(incoming_test.__len__()):
    fis_simulator.input['incoming'] = incoming_test[i]
    fis_simulator.input['waiting'] = waiting_test[i]
    fis_simulator.compute()
    print( ' waiting: ' + str(waiting_test[i]) + ', incoming: ' + str(incoming_test[i]) + ', wait duration: ' + str(round(fis_simulator.output['wait duration'],0)) + ', open duration: ' + str(round(fis_simulator.output['open duration'],0)))

"""# C. Lab tasks

*   Examine the performance of the FIS under the test cases provided in the previous section. You can also provide additional test cases.
*   What are the key performance issues?
*   Suggest some fixes that could improve these issue.
*   Modify the above code to implement the suggested fixes
*   Compare the test performance before & after changes.
"""